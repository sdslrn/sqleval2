id,sql,explain,graph,nl
1,"SELECT Title, Name FROM albums INNER JOIN artists USING (ArtistId);","The title is in the album table, and the name is in the artist table. An artist can have zero or many albums while an album belongs to one artist. returns the album titles and the corresponding artist names","{
    ""nodes"": [
        {""id"": 1, ""sql statement"": ""SELECT Title FROM albums;""},
        {""id"": 2, ""sql statement"": ""SELECT Name FROM artists;""},
        {""id"": 3, ""sql statement"": ""SELECT Title, Name FROM albums INNER JOIN artists USING (ArtistId);""}
    ],
    ""edges"": [
        {""source"": 1, ""target"": 3},
        {""source"": 2, ""target"": 3}
    ]
}",
2,"SELECT m.firstname || ' ' || m.lastname AS 'Manager',
       e.firstname || ' ' || e.lastname AS 'Direct report' 
FROM employees e
INNER JOIN employees m ON m.employeeid = e.reportsto
ORDER BY manager;","ReportsTo column specifies the reporting relationship between employees.

If an employee reports to a manager, the value of the ReportsTo column of the employee¡¯s row is equal to the value of the EmployeeId column of the manager¡¯s row. In case an employee does not report to anyone, the ReportsTo column is NULL.

To get the information on who is the direct report of whom, you use the following statement:","{
    ""nodes"": [
        {""id"": 1, ""sql statement"": ""SELECT m.firstname || ' ' || m.lastname AS 'Manager' FROM employees m;""},
        {""id"": 2, ""sql statement"": ""SELECT e.firstname || ' ' || e.lastname AS 'Direct report' FROM employees e;""},
        {""id"": 3, ""sql statement"": ""SELECT m.firstname || ' ' || m.lastname AS 'Manager', e.firstname || ' ' || e.lastname AS 'Direct report' FROM employees e INNER JOIN employees m ON m.employeeid = e.reportsto;""},
        {""id"": 4, ""sql statement"": ""SELECT m.firstname || ' ' || m.lastname AS 'Manager', e.firstname || ' ' || e.lastname AS 'Direct report' FROM employees e INNER JOIN employees m ON m.employeeid = e.reportsto ORDER BY manager;""}
    ],
    ""edges"": [
        {""source"": 1, ""target"": 3},
        {""source"": 2, ""target"": 3},
        {""source"": 3, ""target"": 4}
    ]
}",
3,"SELECT DISTINCT
 e1.city,
 e1.firstName || ' ' || e1.lastname AS fullname
FROM
 employees e1
INNER JOIN employees e2 ON e2.city = e1.city 
   AND (e1.firstname <> e2.firstname AND e1.lastname <> e2.lastname)
ORDER BY
 e1.city;",use the self-join technique to find the employees located in the same city,,
4,"SELECT trackid,
       name,
       albumid
FROM tracks
WHERE albumid = (
   SELECT albumid
   FROM albums
   WHERE title = 'Let There Be Rock'
);",returns all the tracks in the album with the title  Let There Be Rock,,
5,"SELECT customerid,
       firstname,
       lastname
  FROM customers
 WHERE supportrepid IN (
           SELECT employeeid
             FROM employees
            WHERE country = 'Canada'
       );
", returns the customers whose sales representatives are in Canada,,
6,"SELECT albumid,
       title
  FROM albums
 WHERE 10000000 > (
                      SELECT sum(bytes) 
                        FROM tracks
                       WHERE tracks.AlbumId = albums.AlbumId
                  )
 ORDER BY title;",The following query uses a correlated subquery to return the albums whose size is less than 10MB.,,
7,"SELECT albumid,
       title,
       (
           SELECT count(trackid) 
             FROM tracks
            WHERE tracks.AlbumId = albums.AlbumId
       )
       tracks_count
  FROM albums
 ORDER BY tracks_count DESC;",uses a correlated subquery in the SELECT clause to return the number of tracks in an album.,,
8,"SELECT
    CustomerId,
    FirstName,
    LastName,
    Company
FROM
    Customers c
WHERE
    EXISTS (
        SELECT 
            1 
        FROM 
            Invoices
        WHERE 
            CustomerId = c.CustomerId
    )
ORDER BY
    FirstName,
    LastName; 
",The following statement finds customers who have invoices,,
9,"WITH top_tracks AS (
    SELECT trackid, name
    FROM tracks
    ORDER BY trackid
    LIMIT 5
)
SELECT * FROM top_tracks;",The following example uses a CTE to retrieve the top 5 tracks from the tracks table:,,
10,"WITH customer_sales AS (
    SELECT c.customerid,
           c.firstname || ' ' || c.lastname AS customer_name,
           ROUND(SUM(ii.unitprice * ii.quantity),2) AS total_sales
    FROM customers c
    INNER JOIN invoices i ON c.customerid = i.customerid
    INNER JOIN invoice_items ii ON i.invoiceid = ii.invoiceid
    GROUP BY c.customerid
)
SELECT customer_name, total_sales 
FROM customer_sales
ORDER BY total_sales DESC, customer_name
LIMIT 5;",The following example uses a CTE to find the top 5 customers by total sales from the invoices and invoice_items tables:,,
11,"SELECT customerid,
       firstname,
       lastname,
       CASE country 
           WHEN 'USA' 
               THEN 'Domestic' 
           ELSE 'Foreign' 
       END CustomerGroup
FROM 
    customers
ORDER BY 
    LastName,
    FirstName;","Suppose, you have to make a report of the customer groups with the logic that if a customer locates in the USA, this customer belongs to the domestic group, otherwise the customer belongs to the foreign group.

To make this report, you use the simple CASE expression in the SELECT statement as follows:",,
12,"INSERT INTO artists_backup 
SELECT ArtistId, Name
FROM artists;","To insert data into the artists_backup table with the data from the artists table, you use the INSERT INTO SELECT statement as follows:",,
13,"UPDATE employees
SET email = LOWER(
 firstname || ""."" || lastname || ""@chinookcorp.com""
)
ORDER BY
 firstname
LIMIT 1;","To update one row in the employees table, you use LIMIT 1 clause. To make sure that you update the first row of employees sorted by the first name, you add the ORDER BY firstname clause.

So the following statement updates email of Andrew Adams:

The new email is the combination of the first name, dot (.), last name and the suffix @chinookcorp.com","{
    ""nodes"": [
        {""id"": 1, ""sql statement"": ""SELECT firstname, lastname FROM employees;""},
        {""id"": 2, ""sql statement"": ""SELECT LOWER(firstname || '.' || lastname || '@chinookcorp.com') FROM employees;""},
        {""id"": 3, ""sql statement"": ""UPDATE employees SET email = LOWER(firstname || '.' || lastname || '@chinookcorp.com');""},
        {""id"": 4, ""sql statement"": ""UPDATE employees SET email = LOWER(firstname || '.' || lastname || '@chinookcorp.com') ORDER BY firstname LIMIT 1;""}
    ],
    ""edges"": [
        {""source"": 1, ""target"": 2},
        {""source"": 2, ""target"": 3},
        {""source"": 3, ""target"": 4}
    ]
}",
14,UPDATE tracks SET UnitPrice = ( SELECT AVG(UnitPrice) FROM tracks AS t2 WHERE t2.GenreId = tracks.GenreId ) WHERE GenreId IS NOT NULL;,Update the UnitPrice of each track to be the average UnitPrice of all tracks in the same genre,,
15,"UPDATE tracks
SET UnitPrice = (
  SELECT MAX(UnitPrice)
  FROM tracks AS t2
  WHERE t2.AlbumId = tracks.AlbumId
)
WHERE AlbumId IS NOT NULL;",Set each track's UnitPrice to the maximum UnitPrice among tracks in the same album,,
16,"UPDATE playlists
SET Name = 'Mixed Genre'
WHERE PlaylistId IN (
  SELECT pt.PlaylistId
  FROM playlist_track pt
  JOIN tracks t ON pt.TrackId = t.TrackId
  GROUP BY pt.PlaylistId
  HAVING COUNT(DISTINCT t.GenreId) > 1
);",Rename playlists to 'Mixed Genre' if they contain tracks from more than one genre,,
17,"UPDATE genres
SET Name = 'Misc'
WHERE GenreId IN (
  SELECT GenreId
  FROM tracks
  GROUP BY GenreId
  HAVING COUNT(*) < 10
);",Rename genres to 'Misc' if they have fewer than 10 associated tracks:,,
18,"UPDATE invoices
SET InvoiceDate = (
  SELECT MAX(InvoiceDate)
  FROM invoices AS inv2
  WHERE inv2.CustomerId = invoices.CustomerId
)
WHERE InvoiceDate < (
  SELECT MAX(InvoiceDate)
  FROM invoices AS inv2
  WHERE inv2.CustomerId = invoices.CustomerId
);",Update the InvoiceDate of all invoices to the latest invoice date of the same customer if it is earlier than that,,
19,"UPDATE invoice_items
SET UnitPrice = (
  SELECT UnitPrice * 1.2
  FROM tracks
  WHERE tracks.TrackId = invoice_items.TrackId
    AND tracks.GenreId = (SELECT GenreId FROM genres WHERE Name = 'Rock')
)
WHERE TrackId IN (
  SELECT TrackId
  FROM tracks
  WHERE GenreId = (SELECT GenreId FROM genres WHERE Name = 'Rock')
);","Update UnitPrice in invoice_items to a value 20% higher than the corresponding track's UnitPrice, but only for tracks whose genre is 'Rock':",,
20,"UPDATE customers
SET Fax = Phone
WHERE Fax IS NULL
  AND Email LIKE '%@gmail.com';
",Set Fax in customers to match their phone number if Fax is null and the customer¡¯s email domain is 'gmail.com':,,
21,"UPDATE employees
SET ReportsTo = (
  SELECT EmployeeId
  FROM employees AS boss
  WHERE boss.Country = employees.Country
  ORDER BY HireDate ASC
  LIMIT 1
)
WHERE ReportsTo IS NULL;
","Update ReportsTo in employees to the highest-ranking employee in the same country, based on their hire date (earliest hire date = highest rank), if the current ReportsTo is null:",,
22,"UPDATE albums
SET Title = Title || ' - Greatest Hits'
WHERE AlbumId IN (
  SELECT AlbumId
  FROM tracks
  GROUP BY AlbumId
  HAVING COUNT(*) > 20
)
AND Title NOT LIKE '%Greatest Hits%';","Update the Title in albums to append 'Greatest Hits' to albums with more than 20 tracks, but only if it's not already in the title",,
23,"UPDATE tracks
SET Composer = 'Various Artists'
WHERE Composer IS NULL
  AND TrackId IN (
    SELECT TrackId
    FROM playlist_track
    GROUP BY TrackId
    HAVING COUNT(PlaylistId) > 1
);
","Set Composer in tracks to 'Various Artists' if the track belongs to more than one playlist, but only if Composer is currently null:",,
24,"UPDATE customers
SET PostalCode = (
  SELECT PostalCode
  FROM employees
  WHERE employees.EmployeeId = customers.SupportRepId
    AND employees.City = customers.City
)
WHERE PostalCode IS NULL
  AND SupportRepId IS NOT NULL;",Update PostalCode in customers to match the postal code of their support representative if they reside in the same city and the customer¡¯s postal code is null,,
25,"INSERT INTO albums (Title, ArtistId)
VALUES ('New Album', (SELECT ArtistId FROM artists WHERE Name = 'Accept'));",,,
26,"INSERT INTO employees (FirstName, LastName, ReportsTo)
SELECT 'Jane', 'Smith', EmployeeId
FROM employees
WHERE Title = 'IT Staff';",,,
27,"INSERT INTO albums (Title, ArtistId)
SELECT 
    'Long Album',
    COALESCE(ArtistId, 1)
FROM 
    artists
WHERE 
    LENGTH(Name) > 10;",,,
28,"DELETE FROM playlists 
WHERE PlaylistId NOT IN (SELECT DISTINCT PlaylistId FROM playlist_track);
",É¾³ýÃ»ÓÐÈÎºÎÇúÄ¿µÄ²¥·ÅÁÐ±í,,
29,"DELETE FROM artists 
WHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM albums);
",,,
30,"DELETE FROM tracks
WHERE TrackId IN (
    SELECT ii.TrackId FROM invoice_items ii
    JOIN invoices i ON ii.InvoiceId = i.InvoiceId
    WHERE i.Total > 15
);",,,
31,"DELETE FROM tracks
WHERE UnitPrice <> 0.99
AND AlbumId IN (
    SELECT a.AlbumId FROM albums a
    WHERE NOT EXISTS (
        SELECT 1 FROM albums a2 WHERE a2.ArtistId = a.ArtistId AND a2.AlbumId <> a.AlbumId
    )
);
",,,
32,"DELETE FROM tracks
WHERE LENGTH(Name) = (
    SELECT MIN(LENGTH(Name)) FROM tracks
);
",,,
33,"DELETE FROM invoice_items
WHERE InvoiceId IN (
    SELECT InvoiceId FROM invoices
    WHERE InvoiceDate = (
        SELECT MIN(InvoiceDate) FROM invoices WHERE CustomerId = invoices.CustomerId
    )
);
",,,
34,"DELETE FROM customers
WHERE SupportRepId IN (
    SELECT EmployeeId FROM employees
    WHERE LENGTH(FirstName) = (
        SELECT MIN(LENGTH(FirstName)) FROM employees
    )
);
",,,
35,"DELETE FROM invoice_items
WHERE InvoiceId = (
    SELECT InvoiceId FROM invoices
    WHERE Total = (
        SELECT MAX(Total) FROM invoices
    )
);
",,,
36,"DELETE FROM invoices
WHERE CustomerId IN (
    SELECT CustomerId FROM (
        SELECT CustomerId, COUNT(InvoiceId) AS InvoiceCount
        FROM invoices
        GROUP BY CustomerId
        ORDER BY InvoiceCount DESC
        LIMIT 1
    ) AS top_customer
);
",,,
37,,,,
38,,,,
39,,,,
40,,,,
41,,,,
42,,,,
43,,,,
44,,,,
45,,,,
46,,,,
47,,,,
48,,,,
49,,,,
50,,,,
51,,,,
52,,,,
53,,,,
